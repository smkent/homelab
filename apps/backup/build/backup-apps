#!/bin/sh

set -e

usage() {
    (
        echo "Usage: ${0}"
        echo
        echo "Backup deployment data"
        echo
        echo "Environment variables:"
        echo "  BACKUP_DEST"
        echo "  BACKUP_HOSTS"
        echo "  BACKUP_KEEP_COUNT"
        echo "  SSH_KEY_FILE"
        echo
        echo "Dependencies: rsync, ssh"
    ) >&2
}

case "${1}" in
    -h|--help)
        usage
        exit 0
        ;;
esac

backup_keep_count="${BACKUP_KEEP_COUNT-${EXPORT_BACKUP_KEEP_COUNT-14}}"
if [ -z "${backup_keep_count}" ] || [ "${backup_keep_count}" -lt "3" ]; then
    echo "Error: BACKUP_KEEP_COUNT must be set to 3 or more" >&2
    exit 1
fi

ssh_key_file="${SSH_KEY_FILE-${EXPORT_SSH_KEY_FILE}}"
if [ -z "${ssh_key_file}" ]; then
    echo "Error: SSH_KEY_FILE is empty" >&2
    exit 1
fi
if [ ! -r "${ssh_key_file}" ]; then
    echo "Error: Can't read SSH key file ${ssh_key_file}" >&2
    exit 1
fi

backup_dest="${BACKUP_DEST-${EXPORT_BACKUP_DEST}}"
if [ -z "${backup_dest}" ]; then
    echo "Error: BACKUP_DEST is empty" >&2
    exit 1
fi
mkdir -vp "${backup_dest}"

known_hosts_file="${backup_dest}/ssh_known_hosts"

existing_vers() {
    find "${1?}" -mindepth 1 -maxdepth 1 -type d -print0 \
        | xargs -0 -n1 basename 2>/dev/null \
        | grep '^[0-9]\{8\}$' \
        | grep -ve '^$' \
        | sort -n
}

for backup_host in $(echo "${BACKUP_HOSTS-${EXPORT_BACKUP_HOSTS}}" | sed -e 's:,: :g'); do
    backup_id="$(date +%Y%m%d)"
    backup_dest_host="${backup_dest}/${backup_host}"
    backup_dest_host_id="${backup_dest_host}/${backup_id}"
    all_vers=
    link_dest=
    echo
    echo ">>> Back up ${backup_host} deployment data to ${backup_dest_host_id}"
    echo
    mkdir -vp "${backup_dest_host}"
    if [ ! -e "${backup_dest_host_id}" ]; then
        ls -l "${backup_dest_host}"
        all_vers="$(existing_vers "${backup_dest_host}")"
    fi
    if [ -n "${all_vers}" ]; then
        newest_ver=$(echo "${all_vers}" | xargs -n1 | sort -n | tail -n 1)
        link_dest="--link-dest=../${newest_ver}"
    fi
    (
        set -x
        # shellcheck disable=SC2086
        ionice -c 3 nice -n 19 \
            rsync \
                -e "ssh -i ${ssh_key_file} -o UserKnownHostsFile=${known_hosts_file} -o StrictHostKeyChecking=accept-new" \
                -P -avHSPAX --numeric-ids --delete \
                ${link_dest} \
                root@"${backup_host}":/opt/deploy/. \
                "${backup_dest_host_id}/" \
    )
    all_vers="$(existing_vers "${backup_dest_host}")"
    if [ "$(echo "${all_vers}" | wc -l)" -gt "${backup_keep_count}" ]; then
        echo ">>> Removing old backups for ${backup_host}"
        echo "${all_vers}" | head "-n-${backup_keep_count}" | xargs -t -n 1 rm -rf
    fi
done
